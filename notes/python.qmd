---
title: "Python"
jupyter: python3
---

A run through the [Python Tutorial](https://docs.python.org/3/tutorial/index.html#tutorial-index), focusing on things less familiar.


### calculating
```{python}
# floor division
print(15 // 6)
# modulo
print(15 % 6)
```

### text

- escaping: `'doesn\'t'`
- `print()` interpretes special characters, e.g. `\n`

```{python}
# auto concat
print('Gen' 'etics')
txt = ('Gen'
       'etics')
print(txt)
```

- `s[:i] + s[i:]` is always equal to `s`
- slice indices point *between* characters

```
+---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
```

```{python}
# out of range slicing is handled
word = "tree"; word[1:1123234]
```

### lists

- lists, like strings are [sequence](https://docs.python.org/3/glossary.html#term-sequence) types - they can do slicing, len etc.
- unlike strings, they are mutable

```{python}
ltrs = ['a', 'b', 'c', 'd', 'e']
# remove elements 
ltrs[1:3] = []
ltrs
```

### programming basics

- any non-zero integer is true, zero is false
- any sequence with with non-zero length is true, empty sequences are false

### control flows

- pointing to the same list
```{python}
l1 = ['a', 'b', 'c']
l2 = l1
l2[1] = 'z'
print(l1)
```

- when modifiying a colleciton, it's good to use a *copy* or create a *new* collection
```{python}
pkm = {'pikachu': 'yellow', 'snorlax': 'grey-blue', 'scyther': 'green'}

# copy
for pk, col in pkm.copy().items():
    if pk == 'yellow':
        del pkm[pk]
```

::: {.callout-note collapse="true"}
# copys
copys can be **shallow** or **deep**, the difference only matters for compound objects. A shallow copy creates a new compound object, and then inserts *references* to the objects found in the original. A deep copy creates a new compound object, and then recursively insert copies of the objects found in the original. The latter is best done using `deepcopy()`.
:::

::: {.callout-note}
There are five callouts: `note`, `warning`, `important`, `tip`, `caution`
:::

```{python}
```